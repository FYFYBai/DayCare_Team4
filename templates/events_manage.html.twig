{% extends "master.html.twig" %}

{% block title %}Manage Events - DayCare System{% endblock %}

{% block addHead %}
<!-- FullCalendar CSS -->
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/main.min.css' rel='stylesheet'>
<style>
    #calendar {
        max-width: 1100px;
        margin: 20px auto;
    }
    
    .fc-event {
        cursor: pointer;
    }

    .event-form {
        max-width: 100%;
        margin: 0 auto;
    }
    
    .text-danger {
        color: #dc3545;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Manage Events</h1>
        <div>
            <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addEventModal">
                Create Event
            </button>
            <a href="/events/calendar" class="btn btn-secondary">View Calendar</a>
        </div>
    </div>

    {% if messages.success %}
        <div class="alert alert-success">{{ messages.success[0] }}</div>
    {% endif %}
    {% if messages.error %}
        <div class="alert alert-danger">{{ messages.error[0] }}</div>
    {% endif %}

    <!-- FullCalendar Container -->
    <div id="calendar" class="mb-4"></div>
    
    <!-- Your Events Table -->
    <div class="card">
        <div class="card-header">
            <h2 class="h5 mb-0">Your Events</h2>
        </div>
        <div class="card-body">
            {% if educatorEvents|length > 0 %}
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for event in educatorEvents %}
                                <tr>
                                    <td>{{ event.title }}</td>
                                    <td>{{ event.start_date|date('M j, Y g:i A') }}</td>
                                    <td>{{ event.end_date|date('M j, Y g:i A') }}</td>
                                    <td>
                                        <a href="/events/{{ event.id }}/edit" class="btn btn-sm btn-primary">Edit</a>
                                        <form action="/events/delete" method="post" class="d-inline" onsubmit="return confirmDelete(event);">
                                            <input type="hidden" name="event_id" value="{{ event.id }}">
                                            <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <p class="text-center">You haven't created any events yet.</p>
            {% endif %}
        </div>
    </div>
</div>

<!-- Add Event Modal -->
<div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEventModalLabel">Add New Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form action="/events/create" method="post" class="event-form" id="eventForm">
                    <div class="mb-3">
                        <label for="title" class="form-label">Event Title*</label>
                        <input type="text" class="form-control" id="title" name="title" required>
                        <div class="invalid-feedback" id="title-error"></div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="start_date" class="form-label">Start Date and Time*</label>
                            <input type="datetime-local" class="form-control" id="start_date" name="start_date" required>
                            <div class="invalid-feedback" id="start-date-error"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="end_date" class="form-label">End Date and Time*</label>
                            <input type="datetime-local" class="form-control" id="end_date" name="end_date" required>
                            <div class="invalid-feedback" id="end-date-error"></div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="submitEventBtn" class="btn btn-primary">Create Event</button>
            </div>
        </div>
    </div>
</div>

<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">Error</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="error-message"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this event? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete Event</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block addJS %}
<!-- FullCalendar JS -->
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize Bootstrap modals
    let errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
    let deleteConfirmModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
    let currentDeleteForm = null;
    
    // Initialize FullCalendar
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'
        },
        events: '/events/fetch',
        editable: false,
        selectable: true,
        select: function(info) {
            // Set form values based on selected dates and open modal
            document.getElementById('start_date').value = toDateTimeInputValue(info.start);
            document.getElementById('end_date').value = toDateTimeInputValue(info.end);
            
            // Reset any validation errors
            resetFormValidation();
            
            // Open the modal
            var modal = new bootstrap.Modal(document.getElementById('addEventModal'));
            modal.show();
            
            // Focus on the title field
            setTimeout(function() {
                document.getElementById('title').focus();
            }, 500);
        }
    });
    calendar.render();
    
    // Helper function to format date for datetime-local input
    function toDateTimeInputValue(date) {
        const localDate = new Date(date);
        return new Date(localDate.getTime() - localDate.getTimezoneOffset() * 60000)
            .toISOString()
            .slice(0, 16);
    }
    
    // Reset form validation
    function resetFormValidation() {
        let form = document.getElementById('eventForm');
        let inputs = form.querySelectorAll('input, textarea');
        
        inputs.forEach(input => {
            input.classList.remove('is-invalid');
            const feedbackEl = document.getElementById(input.id + '-error');
            if (feedbackEl) feedbackEl.textContent = '';
        });
    }
    
    // Show error modal
    function showError(message) {
        document.getElementById('error-message').innerHTML = message;
        errorModal.show();
    }
    
    // Submit event button handler
    document.getElementById('submitEventBtn').addEventListener('click', function() {
        validateAndSubmitForm();
    });
    
    // Validation and submission function
    function validateAndSubmitForm() {
        let valid = true;
        let form = document.getElementById('eventForm');
        resetFormValidation();
        
        // Check title
        let titleEl = document.getElementById('title');
        if (!titleEl.value.trim()) {
            titleEl.classList.add('is-invalid');
            document.getElementById('title-error').textContent = 'Event title is required';
            valid = false;
        }
        
        // Check dates
        let startDateEl = document.getElementById('start_date');
        let endDateEl = document.getElementById('end_date');
        let startDate = new Date(startDateEl.value);
        let endDate = new Date(endDateEl.value);
        
        if (isNaN(startDate.getTime())) {
            startDateEl.classList.add('is-invalid');
            document.getElementById('start-date-error').textContent = 'Please select a valid start date and time';
            valid = false;
        }
        
        if (isNaN(endDate.getTime())) {
            endDateEl.classList.add('is-invalid');
            document.getElementById('end-date-error').textContent = 'Please select a valid end date and time';
            valid = false;
        }
        
        if (valid && startDate > endDate) {
            endDateEl.classList.add('is-invalid');
            document.getElementById('end-date-error').textContent = 'End date must be after start date';
            valid = false;
        }
        
        if (!valid) {
            showError('Please correct the errors in the form before submitting.');
        } else {
            form.submit();
        }
    }
    
    // Handle delete confirmation
    window.confirmDelete = function(event) {
        event.preventDefault();
        currentDeleteForm = event.target;
        deleteConfirmModal.show();
        return false;
    };
    
    // Delete confirmation button handler
    document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
        if (currentDeleteForm) {
            deleteConfirmModal.hide();
            currentDeleteForm.submit();
        }
    });
});
</script>
{% endblock %} 